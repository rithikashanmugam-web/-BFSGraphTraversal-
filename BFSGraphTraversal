import java.util.*;
public class  BFSGraphTraversal{
    private int vertices;
    private LinkedList<Integer>[] adjacencyList;
    public BFSGraphTraversal(int v) {
        vertices = v;
        adjacencyList = new LinkedList[v];
        for (int i = 0; i < v; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }
    public void addEdge(int u, int v) {
        adjacencyList[u].add(v);
    }
    public void bfs(int startNode) {
        boolean[] visited = new boolean[vertices]; 
        Queue<Integer> queue = new LinkedList<>(); 
        visited[startNode] = true;
        queue.offer(startNode);

        System.out.print("BFS Traversal: ");
        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");
            for (int neighbor : adjacencyList[current]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.offer(neighbor);
                }
            }
        }
    }
    public static void main(String[] args) {
        BFSGraphTraversal graph = new BFSGraphTraversal(6);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.bfs(0);
    }
}
